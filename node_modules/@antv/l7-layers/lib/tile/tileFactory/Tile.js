"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Core = require("@antv/l7-core");

var _util = require("./util");

var Tile = /*#__PURE__*/function () {
  function Tile(sourceTile, parent) {
    (0, _classCallCheck2.default)(this, Tile);
    (0, _defineProperty2.default)(this, "visible", true);
    (0, _defineProperty2.default)(this, "layers", []);
    (0, _defineProperty2.default)(this, "isLoaded", false);
    this.parent = parent;
    this.sourceTile = sourceTile;
    this.x = sourceTile.x;
    this.y = sourceTile.y;
    this.z = sourceTile.z;
    this.key = "".concat(this.x, "_").concat(this.y, "_").concat(this.z);
  }

  (0, _createClass2.default)(Tile, [{
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "styleUpdate",
    value: function styleUpdate() {
      return;
    }
  }, {
    key: "lnglatInBounds",
    value: function lnglatInBounds(lnglat) {
      var _this$sourceTile$boun = (0, _slicedToArray2.default)(this.sourceTile.bounds, 4),
          minLng = _this$sourceTile$boun[0],
          minLat = _this$sourceTile$boun[1],
          maxLng = _this$sourceTile$boun[2],
          maxLat = _this$sourceTile$boun[3];

      var lng = lnglat.lng,
          lat = lnglat.lat;
      return lng >= minLng && lng <= maxLng && lat >= minLat && lat <= maxLat;
    }
  }, {
    key: "getLayerOptions",
    value: function getLayerOptions() {
      var options = this.parent.getLayerConfig();
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, options), {}, {
        autoFit: false,
        mask: (0, _util.isNeedMask)(this.parent.type) || options.mask
      });
    }
  }, {
    key: "addMask",
    value: function () {
      var _addMask = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(layer, mask) {
        var container;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                container = (0, _l7Core.createLayerContainer)(this.parent.sceneContainer);
                mask.setContainer(container, this.parent.sceneContainer);
                _context.next = 4;
                return mask.init();

              case 4:
                layer.addMaskLayer(mask);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addMask(_x, _x2) {
        return _addMask.apply(this, arguments);
      }

      return addMask;
    }()
  }, {
    key: "addLayer",
    value: function () {
      var _addLayer = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(layer) {
        var container;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // set flag
                layer.isTileLayer = true;
                container = (0, _l7Core.createLayerContainer)(this.parent.sceneContainer);
                layer.setContainer(container, this.parent.sceneContainer);
                this.layers.push(layer);
                _context2.next = 6;
                return layer.init();

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addLayer(_x3) {
        return _addLayer.apply(this, arguments);
      }

      return addLayer;
    }()
  }, {
    key: "updateVisible",
    value: function updateVisible(value) {
      this.visible = value;
      this.updateOptions('visible', value);
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(key, value) {
      this.layers.forEach(function (l) {
        l.updateLayerConfig((0, _defineProperty2.default)({}, key, value));
      });
    }
    /**
     * 一个 Tile 可能有多个 layer，但是在发生拾取、点击事件的时候只有一个生效
     */

  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      return this.layers[0];
    }
  }, {
    key: "getFeatures",
    value: function getFeatures(sourceLayer) {
      return [];
    }
    /**
     * 在一个 Tile 中可能存在一个相同 ID 的 feature
     * @param id
     * @returns
     */

  }, {
    key: "getFeatureById",
    value: function getFeatureById(id) {
      return [];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    }
  }]);
  return Tile;
}();

exports.default = Tile;