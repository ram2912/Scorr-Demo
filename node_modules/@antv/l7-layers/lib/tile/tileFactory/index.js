"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getTileFactory: true
};
exports.getTileFactory = getTileFactory;

var _DebugTile = _interopRequireDefault(require("./DebugTile"));

var _ImageTile = _interopRequireDefault(require("./ImageTile"));

var _MaskTile = _interopRequireDefault(require("./MaskTile"));

var _RasterRGBTile = _interopRequireDefault(require("./RasterRGBTile"));

var _RasterTerrainRGBTile = _interopRequireDefault(require("./RasterTerrainRGBTile"));

var _RasterTile = _interopRequireDefault(require("./RasterTile"));

var _VectorTile = _interopRequireDefault(require("./VectorTile"));

var _interface = require("../interface");

Object.keys(_interface).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _interface[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _interface[key];
    }
  });
});

var _Tile = require("./Tile");

Object.keys(_Tile).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Tile[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Tile[key];
    }
  });
});

function getTileFactory(layer) {
  var tileType = layer.type;

  switch (tileType) {
    case 'PolygonLayer':
      return _VectorTile.default;

    case 'LineLayer':
      return _VectorTile.default;

    case 'PointLayer':
      return _VectorTile.default;

    case 'TileDebugLayer':
      return _DebugTile.default;

    case 'MaskLayer':
      return _MaskTile.default;

    case 'RasterLayer':
      var dataType = layer.getSource().parser.dataType;

      switch (dataType) {
        case 'rgb':
        case 'customRGB':
          return _RasterRGBTile.default;

        case 'arraybuffer':
        case 'customArrayBuffer':
          return _RasterTile.default;

        case 'terrainRGB':
          return _RasterTerrainRGBTile.default;

        default:
          return _ImageTile.default;
      }

    default:
      return _VectorTile.default;
  }
}