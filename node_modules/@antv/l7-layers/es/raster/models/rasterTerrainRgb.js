import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AttributeType, gl } from '@antv/l7-core';
import { getDefaultDomain, getMask } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { RasterImageTriangulation } from "../../core/triangulation";

/* babel-plugin-inline-import '../shaders/raster_terrain_rgb_frag.glsl' */
var Raster_terrainFrag = "precision mediump float;\nuniform float u_opacity: 1.0;\n\nuniform sampler2D u_texture;\nuniform sampler2D u_colorTexture;\n\nvarying vec2 v_texCoord;\n\nuniform vec2 u_domain;\nuniform float u_noDataValue;\nuniform bool u_clampLow: true;\nuniform bool u_clampHigh: true;\n\nvoid main() {\n  vec4 baseColor = texture2D(u_texture, vec2(v_texCoord.x, v_texCoord.y)) * 256.0;\n  float r = baseColor.r * 256.0 * 256.0;\n  float g = baseColor.g * 256.0;\n  float b = baseColor.b;\n  float value =  (r + g + b) * 0.1 - 10000.0;\n  \n  if (value == u_noDataValue) {\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\n  } else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1])) {\n     gl_FragColor = vec4(0.0, 0, 0, 0.0);\n  } else {\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] - u_domain[0]);\n    vec4 color = texture2D(u_colorTexture, vec2(normalisedValue, 0));\n    gl_FragColor = color;\n    gl_FragColor.a =  gl_FragColor.a * u_opacity ;\n  }\n}\n";

/* babel-plugin-inline-import '../shaders/rater_terrain_rgb_vert.glsl' */
var Raster_terrainVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n#pragma include \"projection\"\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   }\n}\n";

var RasterTerrainRGB = /*#__PURE__*/function (_BaseModel) {
  _inherits(RasterTerrainRGB, _BaseModel);

  var _super = _createSuper(RasterTerrainRGB);

  function RasterTerrainRGB() {
    _classCallCheck(this, RasterTerrainRGB);

    return _super.apply(this, arguments);
  }

  _createClass(RasterTerrainRGB, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity,
          _ref$clampLow = _ref.clampLow,
          clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,
          _ref$clampHigh = _ref.clampHigh,
          clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,
          _ref$noDataValue = _ref.noDataValue,
          noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,
          domain = _ref.domain,
          rampColors = _ref.rampColors,
          colorTexture = _ref.colorTexture;

      var newdomain = domain || getDefaultDomain(rampColors);
      var texture = colorTexture;

      if (!colorTexture) {
        texture = this.layer.textureService.getColorTexture(rampColors, newdomain);
      } else {
        this.layer.textureService.setColorTexture(colorTexture, rampColors, newdomain);
      }

      return {
        u_opacity: opacity || 1,
        u_texture: this.texture,
        u_domain: newdomain,
        u_clampLow: clampLow,
        u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,
        u_noDataValue: noDataValue,
        u_colorTexture: texture
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _ref2, _ref2$mask, mask, _ref2$maskInside, maskInside, source, createTexture2D, imageData, model;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref2 = this.layer.getLayerConfig(), _ref2$mask = _ref2.mask, mask = _ref2$mask === void 0 ? false : _ref2$mask, _ref2$maskInside = _ref2.maskInside, maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside;
                source = this.layer.getSource();
                createTexture2D = this.rendererService.createTexture2D;
                _context.next = 5;
                return source.data.images;

              case 5:
                imageData = _context.sent;
                this.texture = createTexture2D({
                  data: imageData[0],
                  width: imageData[0].width,
                  height: imageData[0].height
                });
                _context.next = 9;
                return this.layer.buildLayerModel({
                  moduleName: 'RasterTileDataImage',
                  vertexShader: Raster_terrainVert,
                  fragmentShader: Raster_terrainFrag,
                  triangulation: RasterImageTriangulation,
                  primitive: gl.TRIANGLES,
                  depth: {
                    enable: false
                  },
                  blend: this.getBlend(),
                  stencil: getMask(mask, maskInside)
                });

              case 9:
                model = _context.sent;
                return _context.abrupt("return", [model]);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initModels() {
        return _initModels.apply(this, arguments);
      }

      return initModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;

      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.initModels());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildModels() {
        return _buildModels.apply(this, arguments);
      }

      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);

  return RasterTerrainRGB;
}(BaseModel);

export { RasterTerrainRGB as default };