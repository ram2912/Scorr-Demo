import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { TYPES } from '@antv/l7-core';
import { debounce } from 'lodash';
import { TileLayerService } from "../service/TileLayerService";
import { TilePickService } from "../service/TilePickService";
import { ProxyFuncs } from "../style/constants";
import { getTileFactory } from "../tileFactory";

var BaseTileLayer = /*#__PURE__*/function () {
  // 瓦片数据管理器
  function BaseTileLayer(parent) {
    _classCallCheck(this, BaseTileLayer);

    _defineProperty(this, "initedTileset", false);

    _defineProperty(this, "viewchange", debounce(this.mapchange, 24));

    this.parent = parent;
    var container = this.parent.getContainer();
    this.rendererService = container.get(TYPES.IRendererService);
    this.layerService = container.get(TYPES.ILayerService);
    this.mapService = container.get(TYPES.IMapService);
    this.pickingService = container.get(TYPES.IPickingService); // 初始化瓦片管理服务

    this.tileLayerService = new TileLayerService({
      rendererService: this.rendererService,
      layerService: this.layerService,
      parent: parent
    }); // 初始化拾取服务

    this.tilePickService = new TilePickService({
      tileLayerService: this.tileLayerService,
      layerService: this.layerService,
      parent: parent
    }); // 重置

    this.parent.setLayerPickService(this.tilePickService);
    this.proxy(parent);
    this.initTileSetManager();
  }

  _createClass(BaseTileLayer, [{
    key: "initTileSetManager",
    value: function initTileSetManager() {
      var _this$tilesetManager;

      var source = this.parent.getSource();
      this.tilesetManager = source.tileset;

      if (!this.initedTileset) {
        this.bindTilesetEvent();
        this.initedTileset = true;
      }

      var _this$getCurrentView = this.getCurrentView(),
          latLonBounds = _this$getCurrentView.latLonBounds,
          zoom = _this$getCurrentView.zoom;

      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 ? void 0 : _this$tilesetManager.update(zoom, latLonBounds);
    }
  }, {
    key: "mapchange",
    value: function mapchange() {
      var _this$tilesetManager2;

      var _this$getCurrentView2 = this.getCurrentView(),
          latLonBounds = _this$getCurrentView2.latLonBounds,
          zoom = _this$getCurrentView2.zoom;

      if (this.mapService.version === 'GAODE1.x') {
        var _this$parent$getLayer = this.parent.getLayerConfig(),
            visible = _this$parent$getLayer.visible;

        if (zoom < 2 && visible) {
          this.parent.updateLayerConfig({
            visible: false
          });
          this.layerService.reRender();
        } else if (zoom >= 2 && !visible) {
          this.parent.updateLayerConfig({
            visible: true
          });
          this.layerService.reRender();
        }
      }

      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
        return;
      }

      this.lastViewStates = {
        zoom: zoom,
        latLonBounds: latLonBounds
      };
      (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 ? void 0 : _this$tilesetManager2.throttleUpdate(zoom, latLonBounds);
    }
  }, {
    key: "getCurrentView",
    value: function getCurrentView() {
      var bounds = this.mapService.getBounds();
      var latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];
      var zoom = this.mapService.getZoom();
      return {
        latLonBounds: latLonBounds,
        zoom: zoom
      };
    }
  }, {
    key: "bindTilesetEvent",
    value: function bindTilesetEvent() {
      var _this = this;

      // 瓦片数据加载成功
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      this.tilesetManager.on('tile-loaded', function (tile) {// 将事件抛出，图层上可以监听使用
      }); // 瓦片数据从缓存删除或被执行重新加载

      this.tilesetManager.on('tile-unload', function (tile) {
        // 将事件抛出，图层上可以监听使用
        _this.tileUnLoad(tile);
      }); // 瓦片数据加载失败
      // eslint-disable-next-line @typescript-eslint/no-unused-vars

      this.tilesetManager.on('tile-error', function (error, tile) {
        // 将事件抛出，图层上可以监听使用
        _this.tileError(error);
      }); // 瓦片显隐状态更新

      this.tilesetManager.on('tile-update', function () {
        _this.tileUpdate();
      }); // 地图视野发生改变

      this.mapService.on('zoomend', function () {
        return _this.mapchange();
      });
      this.mapService.on('moveend', function () {
        return _this.viewchange();
      });
    }
  }, {
    key: "render",
    value: function render() {
      this.tileLayerService.render();
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.tileLayerService.getLayers();
    }
  }, {
    key: "getTiles",
    value: function getTiles() {
      return this.tileLayerService.getTiles();
    } //  防抖操作

  }, {
    key: "tileLoaded",
    value: // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function tileLoaded(tile) {//
    }
  }, {
    key: "tileError",
    value: function tileError(error) {
      console.warn('error:', error);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$tilesetManager3;

      (_this$tilesetManager3 = this.tilesetManager) === null || _this$tilesetManager3 === void 0 ? void 0 : _this$tilesetManager3.destroy();
      this.tileLayerService.destroy();
    }
  }, {
    key: "tileUnLoad",
    value: function tileUnLoad(tile) {
      this.tileLayerService.removeTile(tile.key);
    }
  }, {
    key: "tileUpdate",
    value: function () {
      var _tileUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this2 = this;

        var minZoom, maxZoom;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.tilesetManager) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                minZoom = this.parent.getMinZoom();
                maxZoom = this.parent.getMaxZoom();
                _context2.next = 6;
                return Promise.all(this.tilesetManager.tiles.filter(function (tile) {
                  return tile.isLoaded;
                }) // 过滤未加载完成的
                .filter(function (tile) {
                  return tile.isVisibleChange;
                }) // 过滤未发生变化的
                .filter(function (tile) {
                  return tile.data;
                }).filter(function (tile) {
                  return tile.z >= minZoom && tile.z < maxZoom;
                }).map( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile) {
                    var tileInstance, tileLayer;
                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (_this2.tileLayerService.hasTile(tile.key)) {
                              _context.next = 9;
                              break;
                            }

                            tileInstance = getTileFactory(_this2.parent);
                            tileLayer = new tileInstance(tile, _this2.parent);
                            _context.next = 5;
                            return tileLayer.initTileLayer();

                          case 5:
                            _this2.tilePickService.setPickState();

                            if (tileLayer.getLayers().length !== 0) {
                              _this2.tileLayerService.addTile(tileLayer);

                              _this2.tileLayerService.updateTileVisible(tile);

                              _this2.layerService.reRender();
                            }

                            _context.next = 12;
                            break;

                          case 9:
                            // 已加载瓦片
                            _this2.tileLayerService.updateTileVisible(tile);

                            _this2.tilePickService.setPickState();

                            _this2.layerService.reRender();

                          case 12:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 6:
                if (this.tilesetManager.isLoaded) {
                  // 将事件抛出，图层上可以使用瓦片
                  this.parent.emit('tiles-loaded', this.tilesetManager.currentTiles);
                }

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function tileUpdate() {
        return _tileUpdate.apply(this, arguments);
      }

      return tileUpdate;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "setPickState",
    value: function setPickState(layers) {
      return;
    }
  }, {
    key: "pickRender",
    value: function pickRender(target) {
      this.tilePickService.pickRender(target);
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(pickedColors) {
      this.tilePickService.selectFeature(pickedColors);
    }
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(pickedColors) {
      this.tilePickService.highlightPickedFeature(pickedColors);
    }
    /**
     * 实现 TileLayer 对子图层方法的代理
     * @param parent
     */

  }, {
    key: "proxy",
    value: function proxy(parent) {
      var _this3 = this;

      ProxyFuncs.forEach(function (func) {
        // @ts-ignore
        var oldStyleFunc = parent[func].bind(parent); // @ts-ignore

        parent[func] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          oldStyleFunc.apply(void 0, args);

          _this3.getLayers().map(function (child) {
            // @ts-ignore
            child[func].apply(child, args);
          }); // Tip: 目前在更新 RasterData 的 colorTexture 的时候需要额外优化


          if (func === 'style') {
            _this3.getTiles().forEach(function (tile) {
              return tile.styleUpdate.apply(tile, args);
            });
          }

          return parent;
        };
      });
    }
  }]);

  return BaseTileLayer;
}();

export { BaseTileLayer as default };