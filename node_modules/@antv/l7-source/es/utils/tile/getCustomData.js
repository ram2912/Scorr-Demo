import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// import { bindCancel } from './request';
import { processRasterData } from "../bandOperation/bands";
export var getCustomData = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, getCustomDataFunc, rasterFormat, operation) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              getCustomDataFunc({
                x: tile.x,
                y: tile.y,
                z: tile.z
              }, function (err, data) {
                if (err || data.length === 0) {
                  reject(err);
                  return;
                }

                if (data) {
                  processRasterData([{
                    data: data,
                    bands: [0]
                  }], rasterFormat, operation, function (error, img) {
                    if (error) {
                      reject(error);
                    } else if (img) {
                      resolve(img);
                    }
                  });
                }
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getCustomData(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();